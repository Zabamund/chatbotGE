metadata:
  platformVersion: "1.0"
main: true
name: "MyPastaBot"
parameters:
  age: 18
context:
  variables:
    size: "PastaBowlSize"
    type: "PastaType"
    cooking: "PastaCooking"
    cheese: "CheeseType"
    iResult: "nlpresult"
    # resources bundle context variable for manual/hybrid translation
    rb: "resourcebundle"
    ## autoTranslate required - for hybrid translation usage: hard coded from rb and autotranslate for other languages
    autoTranslate: "boolean"
    ## variable holding the translated user input
    translated: "string"
states:
  # new state before intent - autotranslate
  setAutoTranslate:
    component: "System.SetVariable"
    properties:
      variable: "autoTranslate"
      value: true
    transitions: {}
  # detect input language
  detect:
    component: "System.DetectLanguage"
    properties: {}
    transitions: {}
  # translate user input to English for NLP, and store in variable
  translate:
    component: "System.TranslateInput"
    properties:
      variable: "translated"
    transitions: {}
  # simple state to use profile info
  #Greeting:
   # component: "System.Output"
   # properties:
    #  text:  "Hello ${profile.firstName}, how can I help you today?"
    #transitions: {}
  # intent using user input translated to English
  intent:
    component: "System.Intent"
    properties:
      variable: "iResult"
      sourceVariable: "translated"
      confidenceThreshold: 0.4
    transitions:
      actions:
        Greeting: "checkTag"
        OrderPasta: "resolvesize"
        CancelPasta: "cancelorder"
  checkTag:
    component: "System.Output"
    properties:
      # the text thatâ€™s sent to the user.
      text: "languageTag is: '${profile.languageTag}'"
      keepTurn: true
    transitions: {}
  switch:
    component: "System.Switch"
    properties:
      source: "${profile.languageTag}"
      # define 'accepted' languages, these will use resource bundle if available (here only en/default and fr are available), others will be auto-translated
      values:
      - "fr"
      - "en"
      - "it"
    transitions:
      actions:
        fr: "pastaBotsTest"
        en: "pastaBotsTest"
        it: "pastaBotsTest"
        NONE: "unresolved"
  resolvesize:
    component: "System.SetVariable"
    properties:
      variable: "size"
      value: "${iResult.value.entityMatches['PastaBowlSize'][0]}"
    transitions: {}
  resolvecooking:
    component: "System.SetVariable"
    properties:
      variable: "cooking"
      value: "${iResult.value.entityMatches['PastaCooking'][0]}"
    transitions: {}
  resolvetype:
    component: "System.SetVariable"
    properties:
      variable: "type"
      value: "${iResult.value.entityMatches['PastaType'][0]}"
    transitions: {}
  resolvecheese:
    component: "System.SetVariable"
    properties:
      variable: "cheese"
      value: "${iResult.value.entityMatches['CheeseType'][0]}"
    transitions: {}
  size:
    component: "System.List"
    properties:
      options: "${size.type.enumValues}"
      #prompt: "What size Pasta bowl do you want?"
      # use the resource bundle to display hard-coded message, or autotranslate if not available
      prompt: "${rb.PastaBowlSize}"
      variable: "size"
      # fix maximum number of times to prompt user for answer
      maxPrompts: 2
    transitions:
      actions:
        # if user does not provide answer within maxPrompts, go to:
        cancel: "setDefaultSize"
  # move forward if value set
  conditionExists:
    component: "System.ConditionExists"
    properties:
      variable: "size"
    transitions:
      actions:
        exists: "cooking"
        notexists: "setDefaultSize"
  # set default parameter if user does not give valid input
  setDefaultSize:
    component: "System.SetVariable"
    properties:
      variable: "size"
      value: "medium"
    transitions: {}
  cooking:
    component: "System.List"
    properties:
      options: "${cooking.type.enumValues}"
      #prompt: "What cooking do you want for your Pasta?"
      # use the resource bundle to display hard-coded message, or autotranslate if not available
      prompt: "${rb.PastaCooking}"
      variable: "cooking"
    transitions: {}
  type:
    component: "System.Text"
    properties:
      #prompt: "What Pasta Sauce do you want?"
      # use the resource bundle to display hard-coded message, or autotranslate if not available
      prompt: "${rb.PastaType}"
      variable: "type"
    transitions: {}
  cheese:
    component: "System.List"
    properties: 
      #prompt: "What kind of cheese do you want?"
      # use the resource bundle to display hard-coded message, or autotranslate if not available
      prompt: "${rb.CheeseType}"
      options: "${cheese.type.enumValues}"
      variable: "cheese"
      nlpResultVariable:       
      translate:
    transitions: {}
  done:
    component: "System.Output"
    properties:
      text: "Your ${size.value}, ${type.value} pasta bowl cooked ${cooking.value} with ${cheese.value} cheese is on its way."
    transitions:
      return: "done"
  underage:
    component: "System.Output"
    properties:
      text: "You are too young to order a pasta"
    transitions:
      return: "underage"
  cancelorder:
    component: "System.Output"
    properties:
      text: "Your order is cancelled"
    transitions:
      return: "cancelOrder"
  unresolved:
    component: "System.Output"
    properties:
      text: "I don't understand. What do you want to do?"
    transitions:
      return: "unresolved"    
  pastaBotsTest:
    component: "System.Output"
    properties:
    # output text from resource bundle and access profile information from user
      text: "${profile.firstName} ${rb.Greeting}"
    transitions:
        return: "pastaBotsTest"